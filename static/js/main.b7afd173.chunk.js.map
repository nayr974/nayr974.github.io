{"version":3,"sources":["components/task/TaskPriorityIcon.module.css","components/task/Task.module.css","components/common/AddButtonOutlined.module.css","app/models.js","app/taskBoardSlice.js","app/prop-types.js","components/task/TaskPriorityIcon.js","components/task/TaskEdit.js","components/task/Task.js","components/common/AddButtonOutlined.js","components/lane/Lane.js","components/task-board/TaskBoard.js","App.js","app/store.js","serviceWorker.js","index.js","components/lane/Lane.module.css","components/task-board/TaskBoard.module.css"],"names":["module","exports","TaskPriority","hireRyanTask","id","uuid","title","priority","content","getDefaultTask","initialState","taskCounter","taskBoard","subtitle","lanes","tasks","taskBoardSlice","createSlice","name","reducers","updateTaskBoard","state","action","payload","addTaskByLaneId","find","lane","push","updateTask","some","task","taskIndex","findIndex","moveTask","destination","sourceLaneIndex","source","droppableId","destinationLaneIndex","draggedTask","splice","index","deleteTaskById","addLane","updateLane","laneIndex","deleteLaneById","actions","selectTaskBoard","PropTypes","Task","shape","string","isRequired","Lane","arrayOf","TaskBoard","TaskPriorityIcon","props","className","small","styles","large","src","HIGH","MEDIUM","LOW","alt","defaultProps","TaskEditor","useState","setContent","Form","useForm","form","layout","initialValues","onFinish","values","Item","hidden","rules","required","label","max","value","Group","size","Button","editor","ClassicEditor","data","onReady","editing","view","change","writer","setStyle","document","getRoot","onChange","event","getData","style","textAlign","type","htmlType","SaveOutlined","dispatch","useDispatch","setEditing","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","hoverable","extra","EditOutlined","onClick","onConfirm","okText","cancelText","DeleteOutlined","dangerouslySetInnerHTML","__html","visible","width","onCancel","footer","TaskEdit","AddButtonOutlined","add","PlusCircleOutlined","Title","Typography","Paragraph","droppableProps","isDraggingOver","hoverColor","laneColor","centerLine","laneHeader","level","editable","maxLength","onStart","onEnd","delete","map","useSelector","onDragEnd","result","header","titleContainer","taskboard","App","store","configureStore","reducer","taskBoardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7afd173.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"large\":\"TaskPriorityIcon_large__2SwIV\",\"small\":\"TaskPriorityIcon_small__3x9Lm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__1R_VK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add\":\"AddButtonOutlined_add__3KPyG\"};","export const TaskPriority = { HIGH: \"HIGH\", MEDIUM: \"MEDIUM\", LOW: \"LOW\" };\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { TaskPriority } from \"app/models\";\r\n\r\nconst hireRyanTask = {\r\n  id: uuid(),\r\n  title: \"Quick, hire this guy!\",\r\n  priority: TaskPriority.HIGH,\r\n  content: \"<p>This Ryan person is <i>solid</i>. I should hire them.</p>\",\r\n};\r\n\r\n// TODO: I don't think these factory functions belong here, and should be moved.\r\nconst getDefaultTask = () => ({\r\n  id: uuid(),\r\n  title: \"Your new task!\",\r\n  priority: TaskPriority.MEDIUM,\r\n  content:\r\n    \"<p>Click the <strong>pencil</strong> button below to edit, then describe and save your task!</p>\",\r\n});\r\n\r\nconst getDefaultLane = () => ({\r\n  id: uuid(),\r\n  title: \"New Lane\",\r\n  tasks: [],\r\n});\r\n\r\nconst initialState = {\r\n  taskCounter: 0,\r\n  taskBoard: {\r\n    title: \"ShiftGears Task Board\",\r\n    subtitle: \"Revving up your productivity\",\r\n    lanes: [\r\n      {\r\n        id: uuid(),\r\n        title: \"To Do\",\r\n        tasks: [getDefaultTask()],\r\n      },\r\n      {\r\n        id: uuid(),\r\n        title: \"Done\",\r\n        tasks: [],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n// doesn't actually mutate the state because it uses the Immer library,\r\n// which detects changes to a \"draft state\" and produces a brand new\r\n// immutable state based off those changes\r\nexport const taskBoardSlice = createSlice({\r\n  name: \"taskBoard\",\r\n  initialState,\r\n  reducers: {\r\n    updateTaskBoard: (state, action) => {\r\n      state.taskBoard = action.payload;\r\n    },\r\n    addTaskByLaneId: (state, action) => {\r\n      state.taskCounter++;\r\n      const lane = state.taskBoard.lanes.find(\r\n        (lane) => lane.id === action.payload\r\n      );\r\n      lane.tasks.push(\r\n        state.taskCounter === 4 ? hireRyanTask : getDefaultTask()\r\n      );\r\n    },\r\n    updateTask: (state, action) => {\r\n      // This is probably not as efficient as the task being aware of which lane it is in,\r\n      // but seems like a nicer seperation of concern to let the reducer find it given the\r\n      // small working dataset.\r\n      //\r\n      // In the end, the drag and drop library I later used wanted the column index to be in,\r\n      // context at the task level, but I've chosen not to modify this logic.\r\n      const lane = state.taskBoard.lanes.find((lane) =>\r\n        lane.tasks.some((task) => task.id === action.payload.id)\r\n      );\r\n      const taskIndex = lane.tasks.findIndex(\r\n        (task) => task.id === action.payload.id\r\n      );\r\n      lane.tasks[taskIndex] = action.payload;\r\n    },\r\n    // Splices task from source lane and index to target land and index.\r\n    // Expects react-beautiful-dnd onDragEnd result shape as payload, with source\r\n    // and destination properties.\r\n    moveTask: (state, action) => {\r\n      if (!action.payload?.destination) return;\r\n\r\n      // Find indicies of each column\r\n      const sourceLaneIndex = state.taskBoard.lanes.findIndex(\r\n        (lane) => lane.id === action.payload.source.droppableId\r\n      );\r\n      const destinationLaneIndex = state.taskBoard.lanes.findIndex(\r\n        (lane) => lane.id === action.payload.destination.droppableId\r\n      );\r\n\r\n      // Splice out the task that was moved\r\n      const draggedTask = state.taskBoard.lanes[sourceLaneIndex].tasks.splice(\r\n        action.payload.source.index,\r\n        1\r\n      )[0];\r\n\r\n      // Add the task to the destination list at the the target index\r\n      state.taskBoard.lanes[destinationLaneIndex].tasks.splice(\r\n        action.payload.destination.index,\r\n        0,\r\n        draggedTask\r\n      );\r\n    },\r\n    deleteTaskById: (state, action) => {\r\n      const lane = state.taskBoard.lanes.find((lane) =>\r\n        lane.tasks.some((task) => task.id === action.payload)\r\n      );\r\n      const taskIndex = lane.tasks.findIndex(\r\n        (task) => task.id === action.payload\r\n      );\r\n      lane.tasks.splice(taskIndex, 1);\r\n    },\r\n    addLane: (state) => {\r\n      state.taskBoard.lanes.push(getDefaultLane());\r\n    },\r\n    updateLane: (state, action) => {\r\n      const laneIndex = state.taskBoard.lanes.findIndex(\r\n        (lane) => lane.id === action.payload.id\r\n      );\r\n      state.taskBoard.lanes[laneIndex] = action.payload;\r\n    },\r\n    deleteLaneById: (state, action) => {\r\n      const laneIndex = state.taskBoard.lanes.findIndex(\r\n        (lane) => lane.id === action.payload\r\n      );\r\n      state.taskBoard.lanes.splice(laneIndex, 1);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateTaskBoard,\r\n  addTaskByLaneId,\r\n  updateTask,\r\n  moveTask,\r\n  deleteTaskById,\r\n  addLane,\r\n  updateLane,\r\n  deleteLaneById,\r\n} = taskBoardSlice.actions;\r\n\r\nexport const selectTaskBoard = (state) => state.taskBoard.taskBoard;\r\n\r\nexport default taskBoardSlice.reducer;\r\n","import PropTypes from \"prop-types\";\r\n\r\n// This file extends the packages default prop types with custom shapes for this application, to reduce\r\n// boilerplate code.\r\n//\r\n// PropTypes shapes are a loose form of type safety. When running the application in development mode,\r\n// they raise error messages to the console if any props passed to a component do not match the expected\r\n// shape as defined.\r\n\r\nPropTypes.Task = PropTypes.shape({\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  priority: PropTypes.string.isRequired,\r\n  content: PropTypes.string.isRequired,\r\n});\r\n\r\nPropTypes.Lane = PropTypes.shape({\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  tasks: PropTypes.arrayOf(PropTypes.Task),\r\n});\r\n\r\nPropTypes.TaskBoard = PropTypes.shape({\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  lanes: PropTypes.arrayOf(PropTypes.Lane),\r\n});\r\n\r\nexport default PropTypes;\r\n","import PropTypes from \"app/prop-types\";\r\nimport styles from \"./TaskPriorityIcon.module.css\";\r\n\r\nconst propTypes = {\r\n  priority: PropTypes.string.isRequired,\r\n  small: PropTypes.bool,\r\n};\r\n\r\nconst defaultProps = {\r\n  small: false,\r\n};\r\n\r\nconst TaskPriorityIconPath = (priority) =>\r\n  ({\r\n    HIGH: \"/img/high.svg\",\r\n    MEDIUM: \"/img/medium.svg\",\r\n    LOW: \"/img/low.svg\",\r\n  }[priority]);\r\n\r\nconst TaskPriorityIcon = (props) =>\r\n  props.priority && (\r\n    <img\r\n      className={props.small ? styles.small : styles.large}\r\n      src={TaskPriorityIconPath(props.priority)}\r\n      alt=\"Priority\"\r\n    />\r\n  );\r\n\r\nTaskPriorityIcon.propTypes = propTypes;\r\nTaskPriorityIcon.defaultProps = defaultProps;\r\n\r\nexport default TaskPriorityIcon;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Input, Radio, Form, Space } from \"antd\";\r\nimport { SaveOutlined } from \"@ant-design/icons\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n\r\nimport PropTypes from \"app/prop-types\";\r\nimport { TaskPriority } from \"app/models\";\r\nimport TaskPriorityIcon from \"./TaskPriorityIcon\";\r\n\r\nconst propTypes = {\r\n  task: PropTypes.Task.isRequired,\r\n  updateTask: PropTypes.func.isRequired,\r\n};\r\n\r\nconst TaskEditor = (props) => {\r\n  const [content, setContent] = useState(props.task.content);\r\n\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <div>\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        initialValues={props.task}\r\n        onFinish={(values) => {\r\n          // Because the CKEditor component doesn't act like a standard input control, we\r\n          // need to manually set the content property when the form is submitted.\r\n          props.updateTask({ ...values, content });\r\n        }}\r\n      >\r\n        <Form.Item hidden name=\"id\" rules={[{ required: true }]} />\r\n\r\n        <Form.Item\r\n          label=\"Title:\"\r\n          name=\"title\"\r\n          rules={[{ required: true, max: 30 }]}\r\n        >\r\n          <Input value={props.task.title} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Priority:\"\r\n          name=\"priority\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Radio.Group size=\"large\">\r\n            <Radio.Button value={TaskPriority.HIGH}>\r\n              <Space>\r\n                <TaskPriorityIcon small priority={TaskPriority.HIGH} />\r\n                High\r\n              </Space>\r\n            </Radio.Button>\r\n            <Radio.Button value={TaskPriority.MEDIUM}>\r\n              <Space>\r\n                <TaskPriorityIcon small priority={TaskPriority.MEDIUM} />\r\n                Medium\r\n              </Space>\r\n            </Radio.Button>\r\n            <Radio.Button value={TaskPriority.LOW}>\r\n              <Space>\r\n                <TaskPriorityIcon small priority={TaskPriority.LOW} />\r\n                Low\r\n              </Space>\r\n            </Radio.Button>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Details:\" name=\"content\">\r\n          <CKEditor\r\n            editor={ClassicEditor}\r\n            data={content}\r\n            onReady={(editor) => {\r\n              editor.editing.view.change((writer) => {\r\n                writer.setStyle(\r\n                  \"height\",\r\n                  \"300px\",\r\n                  editor.editing.view.document.getRoot()\r\n                );\r\n              });\r\n            }}\r\n            onChange={(event, editor) => setContent(editor.getData())}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item style={{ textAlign: \"right\" }}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            <SaveOutlined />\r\n            Save\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nTaskEditor.propTypes = propTypes;\r\n\r\nexport default TaskEditor;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Modal, Card, Popconfirm } from \"antd\";\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport { updateTask, deleteTaskById } from \"app/taskBoardSlice\";\r\nimport PropTypes from \"app/prop-types\";\r\nimport styles from \"./Task.module.css\";\r\nimport TaskEdit from \"./TaskEdit\";\r\nimport TaskPriorityIcon from \"./TaskPriorityIcon\";\r\n\r\nconst propTypes = {\r\n  task: PropTypes.Task.isRequired,\r\n  taskIndex: PropTypes.number.isRequired,\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst Task = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  return (\r\n    <Draggable draggableId={props.task.id} index={props.taskIndex}>\r\n      {(provided, snapshot) => (\r\n        <div\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <Card\r\n            hoverable\r\n            className={styles.task}\r\n            title={props.task.title}\r\n            extra={<TaskPriorityIcon priority={props.task.priority} />}\r\n            actions={[\r\n              <EditOutlined key=\"edit\" onClick={() => setEditing(true)} />,\r\n\r\n              <Popconfirm\r\n                key=\"delete\"\r\n                title=\"Are you sure to delete this task?\"\r\n                onConfirm={() => dispatch(deleteTaskById(props.task.id))}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n              >\r\n                <DeleteOutlined />\r\n              </Popconfirm>,\r\n            ]}\r\n          >\r\n            {\r\n              // TODO: Ensure sanitization of HTML using \"DOMPurify\" or similar to mitigate attacks, before *dangerously* setting it!\r\n            }\r\n            <div\r\n              dangerouslySetInnerHTML={{\r\n                __html: props.task.content,\r\n              }}\r\n            />\r\n          </Card>\r\n          <Modal\r\n            title=\"Edit Task\"\r\n            visible={editing}\r\n            width=\"50vw\"\r\n            onCancel={() => setEditing(false)}\r\n            footer={null}\r\n          >\r\n            <TaskEdit\r\n              task={props.task}\r\n              updateTask={(values) => {\r\n                dispatch(updateTask(values));\r\n                setEditing(false);\r\n              }}\r\n            />\r\n          </Modal>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nTask.propTypes = propTypes;\r\nTask.defaultProps = defaultProps;\r\n\r\nexport default Task;\r\n","import { Space } from \"antd\";\r\nimport PropTypes from \"app/prop-types\";\r\nimport styles from \"./AddButtonOutlined.module.css\";\r\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\r\n\r\nconst propTypes = {\r\n  label: PropTypes.string,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nconst defaultProps = {\r\n  label: \"Add\",\r\n};\r\n\r\nconst AddButtonOutlined = (props) => (\r\n  <div className={styles.add} onClick={props.onClick}>\r\n    <Space>\r\n      <PlusCircleOutlined />\r\n      {props.label}\r\n    </Space>\r\n  </div>\r\n);\r\n\r\nAddButtonOutlined.propTypes = propTypes;\r\nAddButtonOutlined.defaultProps = defaultProps;\r\n\r\nexport default AddButtonOutlined;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"app/prop-types\";\r\nimport Task from \"components/task/Task\";\r\nimport { Typography, Popconfirm } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport styles from \"./Lane.module.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  addTaskByLaneId,\r\n  updateLane,\r\n  deleteLaneById,\r\n} from \"app/taskBoardSlice\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport AddButtonOutlined from \"components/common/AddButtonOutlined\";\r\n\r\nconst propTypes = {\r\n  lane: PropTypes.Lane.isRequired,\r\n};\r\n\r\nconst { Title, Paragraph } = Typography;\r\n\r\nconst defaultProps = {};\r\n\r\nconst Lane = (props) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Droppable droppableId={props.lane.id}>\r\n      {(provided, snapshot) => (\r\n        <div\r\n          {...provided.droppableProps}\r\n          ref={provided.innerRef}\r\n          className={`${styles.lane} ${\r\n            snapshot.isDraggingOver ? styles.hoverColor : styles.laneColor\r\n          }`}\r\n        >\r\n          <div className={styles.centerLine}>\r\n            <div className={styles.laneHeader}>\r\n              <Title level={4} className={styles.title}>\r\n                <Paragraph\r\n                  editable={{\r\n                    maxLength: 30,\r\n                    onChange: (value) =>\r\n                      dispatch(updateLane({ ...props.lane, title: value })),\r\n                    onStart: () => setEditing(true),\r\n                    onEnd: () => setEditing(false),\r\n                  }}\r\n                >\r\n                  {props.lane.title}\r\n                </Paragraph>\r\n              </Title>\r\n              {!editing && (\r\n                <Popconfirm\r\n                  key=\"delete\"\r\n                  title=\"Are you sure to delete this lane?\"\r\n                  onConfirm={() => dispatch(deleteLaneById(props.lane.id))}\r\n                  okText=\"Yes\"\r\n                  cancelText=\"No\"\r\n                >\r\n                  <DeleteOutlined className={styles.delete} />\r\n                </Popconfirm>\r\n              )}\r\n            </div>\r\n            {props.lane.tasks?.map((task, index) => (\r\n              <Task key={task.id} task={task} taskIndex={index} />\r\n            ))}\r\n            <AddButtonOutlined\r\n              label=\"Add another task\"\r\n              onClick={() => dispatch(addTaskByLaneId(props.lane.id))}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Droppable>\r\n  );\r\n};\r\n\r\nLane.propTypes = propTypes;\r\nLane.defaultProps = defaultProps;\r\n\r\nexport default Lane;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTaskBoard, addLane, moveTask } from \"app/taskBoardSlice\";\r\nimport Lane from \"components/lane/Lane\";\r\nimport styles from \"./TaskBoard.module.css\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport AddButtonOutlined from \"components/common/AddButtonOutlined\";\r\n\r\nconst TaskBoard = () => {\r\n  const taskBoard = useSelector(selectTaskBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={(result) => dispatch(moveTask(result))}>\r\n      <div>\r\n        <div className={styles.header}>\r\n          <img src={\"/img/logo.png\"} alt=\"ShiftGears Logo\" />\r\n          <div className={styles.titleContainer}>\r\n            <span className={styles.title}>{taskBoard.title}</span>\r\n            <br />\r\n            <span className={styles.subtitle}>{taskBoard.subtitle}</span>\r\n          </div>\r\n        </div>\r\n        <div className={styles.taskboard}>\r\n          {taskBoard.lanes?.map((lane) => (\r\n            <Lane key={lane.id} lane={lane} />\r\n          ))}\r\n          <AddButtonOutlined\r\n            label=\"Add another lane\"\r\n            onClick={() => dispatch(addLane())}\r\n          />\r\n        </div>\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default TaskBoard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TaskBoard from \"components/task-board/TaskBoard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"AppContainer\">\n        <TaskBoard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport taskBoardReducer from \"./taskBoardSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    taskBoard: taskBoardReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"Lane_delete__3_X2J\",\"title\":\"Lane_title__2PRjk\",\"laneColor\":\"Lane_laneColor__2W8GP\",\"laneHeader\":\"Lane_laneHeader__2D9xL\",\"hoverColor\":\"Lane_hoverColor__18Jt1\",\"lane\":\"Lane_lane__1ooWS\",\"centerLine\":\"Lane_centerLine__a329f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskboard\":\"TaskBoard_taskboard__3HKac\",\"titleContainer\":\"TaskBoard_titleContainer__3Hkc5\",\"title\":\"TaskBoard_title__2iGv8\",\"subtitle\":\"TaskBoard_subtitle__1csvT\",\"header\":\"TaskBoard_header__1GYQc\"};"],"sourceRoot":""}