{"version":3,"sources":["components/lane/Lane.module.css","components/task/TaskView.module.css","components/task/TaskPriorityIcon.module.css","components/common/AddButtonOutlined.module.css","app/models.js","app/taskBoardSlice.js","app/prop-types.js","components/task/TaskPriorityIcon.js","components/task/TaskView.js","components/task/TaskEdit.js","components/task/Task.js","components/common/AddButtonOutlined.js","components/lane/LaneView.js","components/lane/Lane.js","components/task-board/TaskBoard.js","App.js","app/store.js","serviceWorker.js","index.js","components/task-board/TaskBoard.module.css","components/lane/LaneView.module.css"],"names":["module","exports","TaskPriority","localStorage","window","savedTaskBoard","JSON","parse","getItem","firstTask","id","uuid","title","priority","content","hireRyanTask","defaultState","taskCounter","taskBoard","subtitle","lanes","tasks","initialState","taskBoardSlice","createSlice","name","reducers","updateTaskBoard","state","action","payload","saveTaskBoard","setItem","stringify","message","success","resetTaskBoard","removeItem","warning","addTaskByLaneId","find","lane","push","updateTask","some","task","taskIndex","findIndex","moveTask","destination","sourceLaneIndex","source","droppableId","destinationLaneIndex","draggedTask","splice","index","deleteTaskById","addLane","updateLane","laneIndex","deleteLaneById","actions","selectTaskBoard","PropTypes","Task","shape","string","isRequired","Lane","arrayOf","TaskBoard","TaskPriorityIcon","props","className","small","styles","large","src","HIGH","MEDIUM","LOW","alt","defaultProps","TaskView","hoverable","extra","EditOutlined","icon","onClick","onEdit","onConfirm","onDelete","okText","cancelText","DeleteOutlined","dangerouslySetInnerHTML","__html","TaskEditor","useState","setContent","Form","useForm","form","layout","initialValues","onFinish","values","Item","hidden","rules","required","label","max","value","Group","size","Button","editor","ClassicEditor","data","onReady","editing","view","change","writer","setStyle","document","getRoot","onChange","event","getData","style","textAlign","type","htmlType","SaveOutlined","dispatch","useDispatch","setEditing","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","visible","width","onCancel","footer","TaskEdit","AddButtonOutlined","add","PlusCircleOutlined","Title","Typography","Paragraph","LaneView","isDraggingOver","dragCenterLine","centerLine","laneHeader","level","editable","maxLength","onStart","onEnd","delete","map","onAdd","droppableProps","dragColor","laneColor","useSelector","onDragEnd","result","header","logo","titleContainer","buttons","placement","taskboard","App","store","configureStore","reducer","taskBoardReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,UAAY,wBAAwB,KAAO,qB,oBCAjGD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,KAAO,yB,oBCAvDD,EAAOC,QAAU,CAAC,MAAQ,gCAAgC,MAAQ,kC,oBCAlED,EAAOC,QAAU,CAAC,IAAM,iC,2KCDXC,EAAuB,OAAvBA,EAAuC,SAAvCA,EAAsD,M,SCK7DC,EAAeC,OAAOD,aACtBE,EAAiBC,KAAKC,MAAMJ,EAAaK,QAAQ,cAGjDC,EAAY,CAChBC,GAAIC,cACJC,MAAO,yBACPC,SAAUX,EACVY,QACE,mlBAGEC,EAAe,CACnBL,GAAIC,cACJC,MAAO,wBACPC,SAAUX,EACVY,QAAS,gEAiBLE,EAAe,CACnBC,YAAa,EACbC,UAAW,CACTN,MAAO,wBACPO,SAAU,+BACVC,MAAO,CACL,CACEV,GAAIC,cACJC,MAAO,QACPS,MAAO,CAACZ,IAEV,CACEC,GAAIC,cACJC,MAAO,OACPS,MAAO,OAMTC,EAAY,2BACbN,GADa,IAEhBE,UAAWb,GAAkBW,EAAaE,YAO/BK,EAAiBC,YAAY,CACxCC,KAAM,YACNH,eACAI,SAAU,CACRC,gBAAiB,SAACC,EAAOC,GACvBD,EAAMV,UAAYW,EAAOC,SAE3BC,cAAe,SAACH,GACdzB,EAAa6B,QAAQ,YAAa1B,KAAK2B,UAAUL,EAAMV,YACvDgB,IAAQC,QAAQ,sBAElBC,eAAgB,SAACR,GACfzB,EAAakC,WAAW,aACxBT,EAAMV,UAAYF,EAAaE,UAC/BU,EAAMX,YAAc,EACpBiB,IAAQI,QAAQ,qBAElBC,gBAAiB,SAACX,EAAOC,GACvBD,EAAMX,cACOW,EAAMV,UAAUE,MAAMoB,MACjC,SAACC,GAAD,OAAUA,EAAK/B,KAAOmB,EAAOC,WAE1BT,MAAMqB,KACa,IAAtBd,EAAMX,YAAoBF,EAlEJ,CAC5BL,GAAIC,cACJC,MAAO,gBACPC,SAAUX,EACVY,QACE,sGAgEA6B,WAAY,SAACf,EAAOC,GAOlB,IAAMY,EAAOb,EAAMV,UAAUE,MAAMoB,MAAK,SAACC,GAAD,OACtCA,EAAKpB,MAAMuB,MAAK,SAACC,GAAD,OAAUA,EAAKnC,KAAOmB,EAAOC,QAAQpB,SAEjDoC,EAAYL,EAAKpB,MAAM0B,WAC3B,SAACF,GAAD,OAAUA,EAAKnC,KAAOmB,EAAOC,QAAQpB,MAEvC+B,EAAKpB,MAAMyB,GAAajB,EAAOC,SAKjCkB,SAAU,SAACpB,EAAOC,GAAY,IAAD,EAC3B,GAAI,UAACA,EAAOC,eAAR,aAAC,EAAgBmB,YAArB,CAGA,IAAMC,EAAkBtB,EAAMV,UAAUE,MAAM2B,WAC5C,SAACN,GAAD,OAAUA,EAAK/B,KAAOmB,EAAOC,QAAQqB,OAAOC,eAExCC,EAAuBzB,EAAMV,UAAUE,MAAM2B,WACjD,SAACN,GAAD,OAAUA,EAAK/B,KAAOmB,EAAOC,QAAQmB,YAAYG,eAI7CE,EAAc1B,EAAMV,UAAUE,MAAM8B,GAAiB7B,MAAMkC,OAC/D1B,EAAOC,QAAQqB,OAAOK,MACtB,GACA,GAGF5B,EAAMV,UAAUE,MAAMiC,GAAsBhC,MAAMkC,OAChD1B,EAAOC,QAAQmB,YAAYO,MAC3B,EACAF,KAGJG,eAAgB,SAAC7B,EAAOC,GACtB,IAAMY,EAAOb,EAAMV,UAAUE,MAAMoB,MAAK,SAACC,GAAD,OACtCA,EAAKpB,MAAMuB,MAAK,SAACC,GAAD,OAAUA,EAAKnC,KAAOmB,EAAOC,cAEzCgB,EAAYL,EAAKpB,MAAM0B,WAC3B,SAACF,GAAD,OAAUA,EAAKnC,KAAOmB,EAAOC,WAE/BW,EAAKpB,MAAMkC,OAAOT,EAAW,IAE/BY,QAAS,SAAC9B,GACRA,EAAMV,UAAUE,MAAMsB,KAjHE,CAC5BhC,GAAIC,cACJC,MAAO,WACPS,MAAO,MAgHLsC,WAAY,SAAC/B,EAAOC,GAClB,IAAM+B,EAAYhC,EAAMV,UAAUE,MAAM2B,WACtC,SAACN,GAAD,OAAUA,EAAK/B,KAAOmB,EAAOC,QAAQpB,MAEvCkB,EAAMV,UAAUE,MAAMwC,GAAa/B,EAAOC,SAE5C+B,eAAgB,SAACjC,EAAOC,GACtB,IAAM+B,EAAYhC,EAAMV,UAAUE,MAAM2B,WACtC,SAACN,GAAD,OAAUA,EAAK/B,KAAOmB,EAAOC,WAE/BF,EAAMV,UAAUE,MAAMmC,OAAOK,EAAW,OAKvC,EAWHrC,EAAeuC,QATjB/B,GAFK,EACLJ,gBADK,EAELI,eACAK,EAHK,EAGLA,eACAG,EAJK,EAILA,gBACAI,EALK,EAKLA,WACAK,EANK,EAMLA,SACAS,EAPK,EAOLA,eACAC,EARK,EAQLA,QACAC,EATK,EASLA,WACAE,EAVK,EAULA,eAGWE,EAAkB,SAACnC,GAAD,OAAWA,EAAMV,UAAUA,WAE3CK,IAAf,Q,iBCxKAyC,IAAUC,KAAOD,IAAUE,MAAM,CAC/BxD,GAAIsD,IAAUG,OAAOC,WACrBxD,MAAOoD,IAAUG,OAAOC,WACxBvD,SAAUmD,IAAUG,OAAOC,WAC3BtD,QAASkD,IAAUG,OAAOC,aAG5BJ,IAAUK,KAAOL,IAAUE,MAAM,CAC/BxD,GAAIsD,IAAUG,OAAOC,WACrBxD,MAAOoD,IAAUG,OAAOC,WACxB/C,MAAO2C,IAAUM,QAAQN,IAAUC,QAGrCD,IAAUO,UAAYP,IAAUE,MAAM,CACpCxD,GAAIsD,IAAUG,OAAOC,WACrBxD,MAAOoD,IAAUG,OAAOC,WACxBhD,MAAO4C,IAAUM,QAAQN,IAAUK,QAGtBL,EAAf,EAAeA,I,2ICTTQ,EAAmB,SAACC,GAAD,OACvBA,EAAM5D,UACJ,qBACE6D,UAAWD,EAAME,MAAQC,IAAOD,MAAQC,IAAOC,MAC/CC,KAXwBjE,EAWE4D,EAAM5D,SAVnC,CACCkE,KAAM,gBACNC,OAAQ,kBACRC,IAAK,gBACLpE,IAOEqE,IAAI,aAZmB,IAACrE,GAiB9B2D,EAAiBW,aArBI,CACnBR,OAAO,GAsBMH,QCkBAY,GArCE,SAACX,GAAD,OACf,cAAC,IAAD,CACEY,WAAS,EACTX,UAAWE,IAAO/B,KAClBjC,MAAO6D,EAAM5B,KAAKjC,MAClB0E,MAAO,cAAC,EAAD,CAAkBzE,SAAU4D,EAAM5B,KAAKhC,WAC9CiD,QAAS,CACP,cAACyB,EAAA,EAAD,CAEEb,UAAWE,IAAOY,KAClBC,QAAShB,EAAMiB,QAFX,QAKN,cAAC,IAAD,CAEE9E,MAAM,oCACN+E,UAAWlB,EAAMmB,SACjBC,OAAO,MACPC,WAAW,KALb,SAOE,cAACC,EAAA,EAAD,CAAgBrB,UAAWE,IAAOY,QAN9B,WAbV,SA0BE,qBACEQ,wBAAyB,CACvBC,OAAQxB,EAAM5B,KAAK/B,c,0FCyDZoF,GAnFI,SAACzB,GAClB,MAA8B0B,mBAAS1B,EAAM5B,KAAK/B,SAAlD,mBAAOA,EAAP,KAAgBsF,EAAhB,KAEA,EAAeC,KAAKC,UAAbC,EAAP,oBACA,OACE,8BACE,eAAC,KAAD,CACEA,KAAMA,EACNC,OAAO,WACPC,cAAehC,EAAM5B,KACrB6D,SAAU,SAACC,GAGTlC,EAAM9B,WAAN,2BAAsBgE,GAAtB,IAA8B7F,cAPlC,UAUE,cAAC,KAAK8F,KAAN,CAAWC,QAAM,EAACpF,KAAK,KAAKqF,MAAO,CAAC,CAAEC,UAAU,MAEhD,cAAC,KAAKH,KAAN,CACEI,MAAM,SACNvF,KAAK,QACLqF,MAAO,CAAC,CAAEC,UAAU,EAAME,IAAK,KAHjC,SAKE,cAAC,KAAD,CAAOC,MAAOzC,EAAM5B,KAAKjC,UAG3B,cAAC,KAAKgG,KAAN,CACEI,MAAM,YACNvF,KAAK,WACLqF,MAAO,CAAC,CAAEC,UAAU,IAHtB,SAKE,eAAC,KAAMI,MAAP,CAAaC,KAAK,QAAlB,UACE,cAAC,KAAMC,OAAP,CAAcH,MAAOhH,EAArB,SACE,eAAC,KAAD,WACE,cAAC,EAAD,CAAkByE,OAAK,EAAC9D,SAAUX,IADpC,YAKF,cAAC,KAAMmH,OAAP,CAAcH,MAAOhH,EAArB,SACE,eAAC,KAAD,WACE,cAAC,EAAD,CAAkByE,OAAK,EAAC9D,SAAUX,IADpC,cAKF,cAAC,KAAMmH,OAAP,CAAcH,MAAOhH,EAArB,SACE,eAAC,KAAD,WACE,cAAC,EAAD,CAAkByE,OAAK,EAAC9D,SAAUX,IADpC,gBAQN,cAAC,KAAK0G,KAAN,CAAWI,MAAM,WAAWvF,KAAK,UAAjC,SACE,cAAC,YAAD,CACE6F,OAAQC,KACRC,KAAM1G,EACN2G,QAAS,SAACH,GACRA,EAAOI,QAAQC,KAAKC,QAAO,SAACC,GAC1BA,EAAOC,SACL,SACA,QACAR,EAAOI,QAAQC,KAAKI,SAASC,eAInCC,SAAU,SAACC,EAAOZ,GAAR,OAAmBlB,EAAWkB,EAAOa,gBAInD,cAAC,KAAKvB,KAAN,CAAWwB,MAAO,CAAEC,UAAW,SAA/B,SACE,eAAC,KAAD,CAAQC,KAAK,UAAUC,SAAS,SAAhC,UACE,cAACC,GAAA,EAAD,IADF,kBCrEJvE,GAAO,SAACQ,GACZ,IAAMgE,EAAWC,cACjB,EAA8BvC,oBAAS,GAAvC,mBAAOuB,EAAP,KAAgBiB,EAAhB,KAEA,OACE,cAAC,IAAD,CAAWC,YAAanE,EAAM5B,KAAKnC,GAAI8C,MAAOiB,EAAM3B,UAApD,SACG,SAAC+F,EAAUC,GAAX,OACC,0DACEC,IAAKF,EAASG,UACVH,EAASI,gBACTJ,EAASK,iBAHf,cAKE,cAAC,GAAD,CACErG,KAAM4B,EAAM5B,KACZ6C,OAAQ,kBAAMiD,GAAW,IACzB/C,SAAU,kBAAM6C,EAAShF,EAAegB,EAAM5B,KAAKnC,QAErD,cAAC,IAAD,CACEE,MAAM,YACNuI,QAASzB,EACT0B,MAAM,OACNC,SAAU,kBAAMV,GAAW,IAC3BW,OAAQ,KALV,SAOE,cAACC,GAAD,CACE1G,KAAM4B,EAAM5B,KACZF,WAAY,SAACgE,GACX8B,EAAS9F,EAAWgE,IACpBgC,GAAW,gBAW3B1E,GAAKkB,aAzCgB,GA2CNlB,U,yCC5CTuF,GAAoB,SAAC/E,GAAD,OACxB,qBAAKC,UAAWE,KAAO6E,IAAKhE,QAAShB,EAAMgB,QAA3C,SACE,eAAC,KAAD,WACE,cAACiE,GAAA,EAAD,IACCjF,EAAMuC,YAMbwC,GAAkBrE,aAdG,CACnB6B,MAAO,OAeMwC,UCPPG,GAAqBC,KAArBD,MAAOE,GAAcD,KAAdC,UAETC,GAAW,SAACrF,GAAW,IAAD,EAC1B,EAA8B0B,oBAAS,GAAvC,mBAAOuB,EAAP,KAAgBiB,EAAhB,KAEA,OACE,sBACEjE,UACED,EAAMsF,eAAiBnF,IAAOoF,eAAiBpF,IAAOqF,WAF1D,UAKE,sBAAKvF,UAAWE,IAAOsF,WAAvB,UACE,cAACP,GAAD,CAAOQ,MAAO,EAAGzF,UAAWE,IAAOhE,MAAnC,SACE,cAACiJ,GAAD,CACEO,SAAU,CACRC,UAAW,GACXpC,SAAUxD,EAAMiB,OAChB4E,QAAS,kBAAM3B,GAAW,IAC1B4B,MAAO,kBAAM5B,GAAW,KAL5B,SAQGlE,EAAMhC,KAAK7B,WAGd8G,GACA,cAAC,IAAD,CAEE9G,MAAM,oCACN+E,UAAWlB,EAAMmB,SACjBC,OAAO,MACPC,WAAW,KALb,SAOE,cAACC,EAAA,EAAD,CAAgBrB,UAAWE,IAAO4F,UAN9B,aApBZ,UA8BG/F,EAAMhC,KAAKpB,aA9Bd,aA8BG,EAAkBoJ,KAAI,SAAC5H,EAAMW,GAAP,OACrB,cAAC,GAAD,CAAoBX,KAAMA,EAAMC,UAAWU,GAAhCX,EAAKnC,OAElB,cAAC,GAAD,CAAmBsG,MAAM,mBAAmBvB,QAAShB,EAAMiG,YAMjEZ,GAAS3E,aAjDY,CACnB4E,gBAAgB,GAkDHD,UCjDTzF,GAAO,SAACI,GACZ,IAAMgE,EAAWC,cACjB,OACE,cAAC,IAAD,CAAWtF,YAAaqB,EAAMhC,KAAK/B,GAAnC,SACG,SAACmI,EAAUC,GAAX,OACC,+CACMD,EAAS8B,gBADf,IAEE5B,IAAKF,EAASG,SACdtE,UAAS,UAAKE,IAAOnC,KAAZ,YACPqG,EAASiB,eAAiBnF,IAAOgG,UAAYhG,IAAOiG,WAJxD,SAOE,cAAC,GAAD,CACEpI,KAAMgC,EAAMhC,KACZsH,eAAgBjB,EAASiB,eACzBW,MAAO,kBAAMjC,EAASlG,EAAgBkC,EAAMhC,KAAK/B,MACjDgF,OAAQ,SAACwB,GAAD,OACNuB,EAAS9E,EAAW,2BAAKc,EAAMhC,MAAZ,IAAkB7B,MAAOsG,OAE9CtB,SAAU,kBAAM6C,EAAS5E,EAAeY,EAAMhC,KAAK/B,eAS/D2D,GAAKc,aA9BgB,GAgCNd,U,oBCcAE,GA/CG,WAAO,IAAD,EAChBrD,EAAY4J,YAAY/G,GACxB0E,EAAWC,cAEjB,OACE,cAAC,IAAD,CAAiBqC,UAAW,SAACC,GAAD,OAAYvC,EAASzF,EAASgI,KAA1D,SACE,gCACE,sBAAKtG,UAAWE,KAAOqG,OAAvB,UACE,qBACEnG,IAAK,gBACLI,IAAI,kBACJR,UAAWE,KAAOsG,OAEpB,sBAAKxG,UAAWE,KAAOuG,eAAvB,UACE,sBAAMzG,UAAWE,KAAOhE,MAAxB,SAAgCM,EAAUN,QAC1C,sBAAM8D,UAAWE,KAAOzD,SAAxB,SAAmCD,EAAUC,cAE/C,eAAC,KAAD,CAAOuD,UAAWE,KAAOwG,QAAzB,UACE,cAAC,KAAD,CAAQ9C,KAAK,UAAU7C,QAAS,kBAAMgD,EAAS1G,MAA/C,kBAGA,cAAC,IAAD,CAEEsJ,UAAU,cACVzK,MAAM,2DACN+E,UAAW,kBAAM8C,EAASrG,MAC1ByD,OAAO,MACPC,WAAW,KANb,SAQE,cAAC,KAAD,CAAQwC,KAAK,SAAb,oBAPI,gBAWV,sBAAK5D,UAAWE,KAAO0G,UAAvB,oBACGpK,EAAUE,aADb,aACG,EAAiBqJ,KAAI,SAAChI,GAAD,OACpB,cAAC,GAAD,CAAoBA,KAAMA,GAAfA,EAAK/B,OAElB,cAAC,GAAD,CACEsG,MAAM,mBACNvB,QAAS,kBAAMgD,EAAS/E,iBCvCrB6H,OAVf,WACE,OACE,qBAAK7G,UAAU,MAAf,SACE,qBAAKA,UAAU,eAAf,SACE,cAAC,GAAD,SCLK8G,GAAQC,YAAe,CAClCC,QAAS,CACPxK,UAAWyK,KCOKC,QACW,cAA7BxL,OAAOyL,SAASC,UAEe,UAA7B1L,OAAOyL,SAASC,UAEhB1L,OAAOyL,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJzD,SAASoE,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB,mBEpInBzM,EAAOC,QAAU,CAAC,UAAY,6BAA6B,eAAiB,kCAAkC,MAAQ,yBAAyB,SAAW,4BAA4B,OAAS,0BAA0B,KAAO,wBAAwB,QAAU,6B,mBCAlQD,EAAOC,QAAU,CAAC,OAAS,yBAAyB,MAAQ,wBAAwB,WAAa,6BAA6B,WAAa,6BAA6B,eAAiB,oC","file":"static/js/main.f27c3e5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"laneColor\":\"Lane_laneColor__2XG-K\",\"dragColor\":\"Lane_dragColor__25U2H\",\"lane\":\"Lane_lane__3Gd8T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"TaskView_task__351jB\",\"icon\":\"TaskView_icon__2RwHL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"large\":\"TaskPriorityIcon_large__1cKBr\",\"small\":\"TaskPriorityIcon_small__3vP1_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add\":\"AddButtonOutlined_add__2R8Wd\"};","export const TaskPriority = { HIGH: \"HIGH\", MEDIUM: \"MEDIUM\", LOW: \"LOW\" };\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { TaskPriority } from \"app/models\";\r\nimport { message } from \"antd\";\r\n\r\nconst localStorage = window.localStorage;\r\nconst savedTaskBoard = JSON.parse(localStorage.getItem(\"taskBoard\"));\r\n\r\n// TODO: I'm not sure these constants and factory functions belong here, and should be moved.\r\nconst firstTask = {\r\n  id: uuid(),\r\n  title: \"Welcome to ShiftGears!\",\r\n  priority: TaskPriority.LOW,\r\n  content:\r\n    \"<center><img width='300px' src='https://cdn.dribbble.com/users/3347131/screenshots/6663172/smallworld.gif'/></center><br/><p>Hi! This is a simple task organizer to kick your productivity <i>into high gear</i>.</p><p>Try it out:</p><ul><li><strong>Add new tasks</strong> by clicking “Add another task” at the bottom of any lane.</li><li><strong>Edit, or delete tasks</strong> by clicking the pencil or trash can icons on that task.</li><li><strong>Move tasks around</strong> by clicking and dragging them.</li><li>You can also <strong>add, remove, and edit lanes</strong>!</li></ul>\",\r\n};\r\n\r\nconst hireRyanTask = {\r\n  id: uuid(),\r\n  title: \"Quick, hire this guy!\",\r\n  priority: TaskPriority.HIGH,\r\n  content: \"<p>This Ryan person is <i>solid</i>. I should hire them.</p>\",\r\n};\r\n\r\nconst getDefaultTask = () => ({\r\n  id: uuid(),\r\n  title: \"Your new task\",\r\n  priority: TaskPriority.MEDIUM,\r\n  content:\r\n    \"<p>Click the <strong>pencil</strong> button below to edit, then describe and save your task!</p>\",\r\n});\r\n\r\nconst getDefaultLane = () => ({\r\n  id: uuid(),\r\n  title: \"New Lane\",\r\n  tasks: [],\r\n});\r\n\r\nconst defaultState = {\r\n  taskCounter: 0,\r\n  taskBoard: {\r\n    title: \"ShiftGears Task Board\",\r\n    subtitle: \"Revving up your productivity\",\r\n    lanes: [\r\n      {\r\n        id: uuid(),\r\n        title: \"To Do\",\r\n        tasks: [firstTask],\r\n      },\r\n      {\r\n        id: uuid(),\r\n        title: \"Done\",\r\n        tasks: [],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  ...defaultState,\r\n  taskBoard: savedTaskBoard || defaultState.taskBoard,\r\n};\r\n\r\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n// doesn't actually mutate the state because it uses the Immer library,\r\n// which detects changes to a \"draft state\" and produces a brand new\r\n// immutable state based off those changes\r\nexport const taskBoardSlice = createSlice({\r\n  name: \"taskBoard\",\r\n  initialState,\r\n  reducers: {\r\n    updateTaskBoard: (state, action) => {\r\n      state.taskBoard = action.payload;\r\n    },\r\n    saveTaskBoard: (state) => {\r\n      localStorage.setItem(\"taskBoard\", JSON.stringify(state.taskBoard));\r\n      message.success(\"Task board saved.\");\r\n    },\r\n    resetTaskBoard: (state) => {\r\n      localStorage.removeItem(\"taskBoard\");\r\n      state.taskBoard = defaultState.taskBoard;\r\n      state.taskCounter = 0;\r\n      message.warning(\"Task board reset\");\r\n    },\r\n    addTaskByLaneId: (state, action) => {\r\n      state.taskCounter++;\r\n      const lane = state.taskBoard.lanes.find(\r\n        (lane) => lane.id === action.payload\r\n      );\r\n      lane.tasks.push(\r\n        state.taskCounter === 4 ? hireRyanTask : getDefaultTask()\r\n      );\r\n    },\r\n    updateTask: (state, action) => {\r\n      // This is probably not as efficient as the task being aware of which lane it is in,\r\n      // but seems like a nicer seperation of concern to let the reducer find it given the\r\n      // small working dataset.\r\n      //\r\n      // In the end, the drag and drop library I later used wanted the column index to be in,\r\n      // context at the task level, but I've chosen not to modify this logic.\r\n      const lane = state.taskBoard.lanes.find((lane) =>\r\n        lane.tasks.some((task) => task.id === action.payload.id)\r\n      );\r\n      const taskIndex = lane.tasks.findIndex(\r\n        (task) => task.id === action.payload.id\r\n      );\r\n      lane.tasks[taskIndex] = action.payload;\r\n    },\r\n    // Splices task from source lane and index to target land and index.\r\n    // Expects react-beautiful-dnd onDragEnd result shape as payload, with source\r\n    // and destination properties.\r\n    moveTask: (state, action) => {\r\n      if (!action.payload?.destination) return;\r\n\r\n      // Find indicies of each column\r\n      const sourceLaneIndex = state.taskBoard.lanes.findIndex(\r\n        (lane) => lane.id === action.payload.source.droppableId\r\n      );\r\n      const destinationLaneIndex = state.taskBoard.lanes.findIndex(\r\n        (lane) => lane.id === action.payload.destination.droppableId\r\n      );\r\n\r\n      // Splice out the task that was moved\r\n      const draggedTask = state.taskBoard.lanes[sourceLaneIndex].tasks.splice(\r\n        action.payload.source.index,\r\n        1\r\n      )[0];\r\n\r\n      // Add the task to the destination list at the the target index\r\n      state.taskBoard.lanes[destinationLaneIndex].tasks.splice(\r\n        action.payload.destination.index,\r\n        0,\r\n        draggedTask\r\n      );\r\n    },\r\n    deleteTaskById: (state, action) => {\r\n      const lane = state.taskBoard.lanes.find((lane) =>\r\n        lane.tasks.some((task) => task.id === action.payload)\r\n      );\r\n      const taskIndex = lane.tasks.findIndex(\r\n        (task) => task.id === action.payload\r\n      );\r\n      lane.tasks.splice(taskIndex, 1);\r\n    },\r\n    addLane: (state) => {\r\n      state.taskBoard.lanes.push(getDefaultLane());\r\n    },\r\n    updateLane: (state, action) => {\r\n      const laneIndex = state.taskBoard.lanes.findIndex(\r\n        (lane) => lane.id === action.payload.id\r\n      );\r\n      state.taskBoard.lanes[laneIndex] = action.payload;\r\n    },\r\n    deleteLaneById: (state, action) => {\r\n      const laneIndex = state.taskBoard.lanes.findIndex(\r\n        (lane) => lane.id === action.payload\r\n      );\r\n      state.taskBoard.lanes.splice(laneIndex, 1);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateTaskBoard,\r\n  saveTaskBoard,\r\n  resetTaskBoard,\r\n  addTaskByLaneId,\r\n  updateTask,\r\n  moveTask,\r\n  deleteTaskById,\r\n  addLane,\r\n  updateLane,\r\n  deleteLaneById,\r\n} = taskBoardSlice.actions;\r\n\r\nexport const selectTaskBoard = (state) => state.taskBoard.taskBoard;\r\n\r\nexport default taskBoardSlice.reducer;\r\n","import PropTypes from \"prop-types\";\r\n\r\n// This file extends the packages default prop types with custom shapes for this application, to reduce\r\n// boilerplate code.\r\n//\r\n// PropTypes shapes are a loose form of type safety. When running the application in development mode,\r\n// they raise error messages to the console if any props passed to a component do not match the expected\r\n// shape as defined.\r\n\r\nPropTypes.Task = PropTypes.shape({\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  priority: PropTypes.string.isRequired,\r\n  content: PropTypes.string.isRequired,\r\n});\r\n\r\nPropTypes.Lane = PropTypes.shape({\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  tasks: PropTypes.arrayOf(PropTypes.Task),\r\n});\r\n\r\nPropTypes.TaskBoard = PropTypes.shape({\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  lanes: PropTypes.arrayOf(PropTypes.Lane),\r\n});\r\n\r\nexport default PropTypes;\r\n","import PropTypes from \"app/prop-types\";\r\nimport styles from \"./TaskPriorityIcon.module.css\";\r\n\r\nconst propTypes = {\r\n  priority: PropTypes.string.isRequired,\r\n  small: PropTypes.bool,\r\n};\r\n\r\nconst defaultProps = {\r\n  small: false,\r\n};\r\n\r\nconst TaskPriorityIconPath = (priority) =>\r\n  ({\r\n    HIGH: \"/img/high.svg\",\r\n    MEDIUM: \"/img/medium.svg\",\r\n    LOW: \"/img/low.svg\",\r\n  }[priority]);\r\n\r\nconst TaskPriorityIcon = (props) =>\r\n  props.priority && (\r\n    <img\r\n      className={props.small ? styles.small : styles.large}\r\n      src={TaskPriorityIconPath(props.priority)}\r\n      alt=\"Priority\"\r\n    />\r\n  );\r\n\r\nTaskPriorityIcon.propTypes = propTypes;\r\nTaskPriorityIcon.defaultProps = defaultProps;\r\n\r\nexport default TaskPriorityIcon;\r\n","import PropTypes from \"app/prop-types\";\r\nimport styles from \"./TaskView.module.css\";\r\nimport { Card, Popconfirm } from \"antd\";\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport TaskPriorityIcon from \"./TaskPriorityIcon\";\r\n\r\nconst propTypes = {\r\n  task: PropTypes.Task.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nconst TaskView = (props) => (\r\n  <Card\r\n    hoverable\r\n    className={styles.task}\r\n    title={props.task.title}\r\n    extra={<TaskPriorityIcon priority={props.task.priority} />}\r\n    actions={[\r\n      <EditOutlined\r\n        key=\"edit\"\r\n        className={styles.icon}\r\n        onClick={props.onEdit}\r\n      />,\r\n\r\n      <Popconfirm\r\n        key=\"delete\"\r\n        title=\"Are you sure to delete this task?\"\r\n        onConfirm={props.onDelete}\r\n        okText=\"Yes\"\r\n        cancelText=\"No\"\r\n      >\r\n        <DeleteOutlined className={styles.icon} />\r\n      </Popconfirm>,\r\n    ]}\r\n  >\r\n    {\r\n      // TODO: Ensure sanitization of HTML using \"DOMPurify\" or similar to mitigate attacks, before *dangerously* setting it or originally saving it!\r\n    }\r\n    <div\r\n      dangerouslySetInnerHTML={{\r\n        __html: props.task.content,\r\n      }}\r\n    />\r\n  </Card>\r\n);\r\n\r\nTaskView.propTypes = propTypes;\r\n\r\nexport default TaskView;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Input, Radio, Form, Space } from \"antd\";\r\nimport { SaveOutlined } from \"@ant-design/icons\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n\r\nimport PropTypes from \"app/prop-types\";\r\nimport { TaskPriority } from \"app/models\";\r\nimport TaskPriorityIcon from \"./TaskPriorityIcon\";\r\n\r\nconst propTypes = {\r\n  task: PropTypes.Task.isRequired,\r\n  updateTask: PropTypes.func.isRequired,\r\n};\r\n\r\nconst TaskEditor = (props) => {\r\n  const [content, setContent] = useState(props.task.content);\r\n\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <div>\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        initialValues={props.task}\r\n        onFinish={(values) => {\r\n          // Because the CKEditor component doesn't act like a standard input control, we\r\n          // need to manually set the content property when the form is submitted.\r\n          props.updateTask({ ...values, content });\r\n        }}\r\n      >\r\n        <Form.Item hidden name=\"id\" rules={[{ required: true }]} />\r\n\r\n        <Form.Item\r\n          label=\"Title:\"\r\n          name=\"title\"\r\n          rules={[{ required: true, max: 30 }]}\r\n        >\r\n          <Input value={props.task.title} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Priority:\"\r\n          name=\"priority\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Radio.Group size=\"large\">\r\n            <Radio.Button value={TaskPriority.HIGH}>\r\n              <Space>\r\n                <TaskPriorityIcon small priority={TaskPriority.HIGH} />\r\n                High\r\n              </Space>\r\n            </Radio.Button>\r\n            <Radio.Button value={TaskPriority.MEDIUM}>\r\n              <Space>\r\n                <TaskPriorityIcon small priority={TaskPriority.MEDIUM} />\r\n                Medium\r\n              </Space>\r\n            </Radio.Button>\r\n            <Radio.Button value={TaskPriority.LOW}>\r\n              <Space>\r\n                <TaskPriorityIcon small priority={TaskPriority.LOW} />\r\n                Low\r\n              </Space>\r\n            </Radio.Button>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Details:\" name=\"content\">\r\n          <CKEditor\r\n            editor={ClassicEditor}\r\n            data={content}\r\n            onReady={(editor) => {\r\n              editor.editing.view.change((writer) => {\r\n                writer.setStyle(\r\n                  \"height\",\r\n                  \"300px\",\r\n                  editor.editing.view.document.getRoot()\r\n                );\r\n              });\r\n            }}\r\n            onChange={(event, editor) => setContent(editor.getData())}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item style={{ textAlign: \"right\" }}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            <SaveOutlined />\r\n            Save\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nTaskEditor.propTypes = propTypes;\r\n\r\nexport default TaskEditor;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Modal } from \"antd\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport { updateTask, deleteTaskById } from \"app/taskBoardSlice\";\r\nimport PropTypes from \"app/prop-types\";\r\nimport TaskView from \"./TaskView\";\r\nimport TaskEdit from \"./TaskEdit\";\r\n\r\nconst propTypes = {\r\n  task: PropTypes.Task.isRequired,\r\n  taskIndex: PropTypes.number.isRequired,\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst Task = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  return (\r\n    <Draggable draggableId={props.task.id} index={props.taskIndex}>\r\n      {(provided, snapshot) => (\r\n        <div\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <TaskView\r\n            task={props.task}\r\n            onEdit={() => setEditing(true)}\r\n            onDelete={() => dispatch(deleteTaskById(props.task.id))}\r\n          />\r\n          <Modal\r\n            title=\"Edit Task\"\r\n            visible={editing}\r\n            width=\"50vw\"\r\n            onCancel={() => setEditing(false)}\r\n            footer={null}\r\n          >\r\n            <TaskEdit\r\n              task={props.task}\r\n              updateTask={(values) => {\r\n                dispatch(updateTask(values));\r\n                setEditing(false);\r\n              }}\r\n            />\r\n          </Modal>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nTask.propTypes = propTypes;\r\nTask.defaultProps = defaultProps;\r\n\r\nexport default Task;\r\n","import { Space } from \"antd\";\r\nimport PropTypes from \"app/prop-types\";\r\nimport styles from \"./AddButtonOutlined.module.css\";\r\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\r\n\r\nconst propTypes = {\r\n  label: PropTypes.string,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nconst defaultProps = {\r\n  label: \"Add\",\r\n};\r\n\r\nconst AddButtonOutlined = (props) => (\r\n  <div className={styles.add} onClick={props.onClick}>\r\n    <Space>\r\n      <PlusCircleOutlined />\r\n      {props.label}\r\n    </Space>\r\n  </div>\r\n);\r\n\r\nAddButtonOutlined.propTypes = propTypes;\r\nAddButtonOutlined.defaultProps = defaultProps;\r\n\r\nexport default AddButtonOutlined;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"app/prop-types\";\r\nimport styles from \"./LaneView.module.css\";\r\nimport Task from \"components/task/Task\";\r\nimport { Typography, Popconfirm } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport AddButtonOutlined from \"components/common/AddButtonOutlined\";\r\n\r\nconst propTypes = {\r\n  lane: PropTypes.Lane.isRequired,\r\n  isDraggingOver: PropTypes.bool,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nconst defaultProps = {\r\n  isDraggingOver: false,\r\n};\r\n\r\nconst { Title, Paragraph } = Typography;\r\n\r\nconst LaneView = (props) => {\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        props.isDraggingOver ? styles.dragCenterLine : styles.centerLine\r\n      }\r\n    >\r\n      <div className={styles.laneHeader}>\r\n        <Title level={4} className={styles.title}>\r\n          <Paragraph\r\n            editable={{\r\n              maxLength: 30,\r\n              onChange: props.onEdit,\r\n              onStart: () => setEditing(true),\r\n              onEnd: () => setEditing(false),\r\n            }}\r\n          >\r\n            {props.lane.title}\r\n          </Paragraph>\r\n        </Title>\r\n        {!editing && (\r\n          <Popconfirm\r\n            key=\"delete\"\r\n            title=\"Are you sure to delete this lane?\"\r\n            onConfirm={props.onDelete}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n          >\r\n            <DeleteOutlined className={styles.delete} />\r\n          </Popconfirm>\r\n        )}\r\n      </div>\r\n      {props.lane.tasks?.map((task, index) => (\r\n        <Task key={task.id} task={task} taskIndex={index} />\r\n      ))}\r\n      <AddButtonOutlined label=\"Add another task\" onClick={props.onAdd} />\r\n    </div>\r\n  );\r\n};\r\n\r\nLaneView.propTypes = propTypes;\r\nLaneView.defaultProps = defaultProps;\r\n\r\nexport default LaneView;\r\n","import PropTypes from \"app/prop-types\";\r\nimport styles from \"./Lane.module.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  addTaskByLaneId,\r\n  updateLane,\r\n  deleteLaneById,\r\n} from \"app/taskBoardSlice\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport LaneView from \"./LaneView\";\r\n\r\nconst propTypes = {\r\n  lane: PropTypes.Lane.isRequired,\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst Lane = (props) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Droppable droppableId={props.lane.id}>\r\n      {(provided, snapshot) => (\r\n        <div\r\n          {...provided.droppableProps}\r\n          ref={provided.innerRef}\r\n          className={`${styles.lane} ${\r\n            snapshot.isDraggingOver ? styles.dragColor : styles.laneColor\r\n          }`}\r\n        >\r\n          <LaneView\r\n            lane={props.lane}\r\n            isDraggingOver={snapshot.isDraggingOver}\r\n            onAdd={() => dispatch(addTaskByLaneId(props.lane.id))}\r\n            onEdit={(value) =>\r\n              dispatch(updateLane({ ...props.lane, title: value }))\r\n            }\r\n            onDelete={() => dispatch(deleteLaneById(props.lane.id))}\r\n          />\r\n        </div>\r\n      )}\r\n    </Droppable>\r\n  );\r\n};\r\n\r\nLane.propTypes = propTypes;\r\nLane.defaultProps = defaultProps;\r\n\r\nexport default Lane;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectTaskBoard,\r\n  addLane,\r\n  moveTask,\r\n  saveTaskBoard,\r\n  resetTaskBoard,\r\n} from \"app/taskBoardSlice\";\r\nimport Lane from \"components/lane/Lane\";\r\nimport styles from \"./TaskBoard.module.css\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport AddButtonOutlined from \"components/common/AddButtonOutlined\";\r\nimport { Button, Popconfirm, Space } from \"antd\";\r\n\r\nconst TaskBoard = () => {\r\n  const taskBoard = useSelector(selectTaskBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={(result) => dispatch(moveTask(result))}>\r\n      <div>\r\n        <div className={styles.header}>\r\n          <img\r\n            src={\"/img/logo.png\"}\r\n            alt=\"ShiftGears Logo\"\r\n            className={styles.logo}\r\n          />\r\n          <div className={styles.titleContainer}>\r\n            <span className={styles.title}>{taskBoard.title}</span>\r\n            <span className={styles.subtitle}>{taskBoard.subtitle}</span>\r\n          </div>\r\n          <Space className={styles.buttons}>\r\n            <Button type=\"primary\" onClick={() => dispatch(saveTaskBoard())}>\r\n              Save\r\n            </Button>\r\n            <Popconfirm\r\n              key=\"delete\"\r\n              placement=\"bottomRight\"\r\n              title=\"Are you sure to reset the board? There is no going back.\"\r\n              onConfirm={() => dispatch(resetTaskBoard())}\r\n              okText=\"Yes\"\r\n              cancelText=\"No\"\r\n            >\r\n              <Button type=\"danger\">Reset</Button>\r\n            </Popconfirm>\r\n          </Space>\r\n        </div>\r\n        <div className={styles.taskboard}>\r\n          {taskBoard.lanes?.map((lane) => (\r\n            <Lane key={lane.id} lane={lane} />\r\n          ))}\r\n          <AddButtonOutlined\r\n            label=\"Add another lane\"\r\n            onClick={() => dispatch(addLane())}\r\n          />\r\n        </div>\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default TaskBoard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TaskBoard from \"components/task-board/TaskBoard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"AppContainer\">\n        <TaskBoard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport taskBoardReducer from \"./taskBoardSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    taskBoard: taskBoardReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskboard\":\"TaskBoard_taskboard__3QNMn\",\"titleContainer\":\"TaskBoard_titleContainer__Qp8T3\",\"title\":\"TaskBoard_title__1p_oS\",\"subtitle\":\"TaskBoard_subtitle__1aBW8\",\"header\":\"TaskBoard_header__1nIGh\",\"logo\":\"TaskBoard_logo__3cZHO\",\"buttons\":\"TaskBoard_buttons__cT2iy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"LaneView_delete__3cZtQ\",\"title\":\"LaneView_title__YPC54\",\"laneHeader\":\"LaneView_laneHeader__1iHWt\",\"centerLine\":\"LaneView_centerLine__1tLCo\",\"dragCenterLine\":\"LaneView_dragCenterLine__paRuu\"};"],"sourceRoot":""}